package Y2022

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

internal class Day13Test {

    val testData = """
    [1,1,3,1,1]
    [1,1,5,1,1]

    [[1],[2,3,4]]
    [[1],4]

    [9]
    [[8,7,6]]

    [[4,4],4,4]
    [[4,4],4,4,4]

    [7,7,7,7]
    [7,7,7]

    []
    [3]

    [[[]]]
    [[]]

    [1,[2,[3,[4,[5,6,7]]]],8,9]
    [1,[2,[3,[4,[5,6,0]]]],8,9]
    """.trimIndent()

    /**
     * [[],[4,[[7]],[[3,10],[5]]]]
     * [                         ]
     *  [],[                    ]
     *      4,[   ],[          ]
     *         [7]   [3,10],[5]
     *
     * [[[[0,5,7],0,10],[[],2,8,3],1,[5,8]],[]]
     * [                                      ]
     *  [                                 ],[]
     *   [            ],[        ],1,[5,8]
     *    [0,5,7],0,10   [],2,8,3
     *
     *    [] with [[[0,5,7],0,10],[[],2,8,3],1,[5,8]]
     *    → left smaller right → right order
     *
     *
     * [[10],[],[]]
     * [          ]
     *  [10],[],[]
     *
     * [[2,4,2,[[6],[1,10],4,9],3],[7,8,5],[[],0],[[5,[],[]],7]]
     * [                                                       ]
     *  [2,4,2,[[6],[1,10],4,9],3],[7,8,5],[[],0],[[5,[],[]],7]
     *         [               ,3],[7,8,5],[    ],[        ],7
     *          [6],[1,10],4,9]             [],0   [5,[],[]
     *
     * [10] with [2,4,2,...]
     * 10 with 2 → wrong order
     *
     * [[[[2,0,1],6,[1],7]],[7,10,2],[],[[]],[2,1,[[],9],[[6,9,9,6,0],[],[10,2]]]]
     * [                                                                         ]
     *  [                                                                       ]
     *   [                ],[7,10,2],[],[  ],[2,1,[  ,9],[           ,  ,      ]
     *    [2,0,1],6,[1],7]               []        []     [6,9,9,6,0] [] [10,2]
     *
     * [[4,[],6,5],[[],[[],[5,2]],[1,4],0,[[5],[9,9,4,1,5]]],[[],10,10,[8],[1,[8],2,9,2]],[7,3,[[0,8,5,2],[4,2,10],0]],[1,[[1,9,5],3,10,[10,8]],9,[[]]]
     *  [4,  ,6,5],[  ,          ,     ,0,                 ],[  ,10,10,   ,[
     *     []       [] [  ,     ] [1,4]   [   ,           ]   []       [8]
     *                  [] [5,2]           [5] [9,9,4,1,5]
     * Compare [                                                                       ] with 4
     * Compare [[2,0,1],6,[1],7]] with 4
     * Compare  [2,0,1] with 4
     * Compare 2 with 4 → right order
     */
    val moreTestData = """
        [[],[4,[[7]],[[3,10],[5]]]]
        [[[[0,5,7],0,10],[[],2,8,3],1,[5,8]],[]]
        
        [[10],[],[]]
        [[2,4,2,[[6],[1,10],4,9],3],[7,8,5],[[],0],[[5,[],[]],7]]
        
        []
        [[8,0,[7,[10,10,8,6],5],6],[],[]]
        
        [[],[],[],[7],[0]]
        [[1,[]],[],[5,6]]
        
        [[[5],2,7,[[],[10,10,0,5]],[]],[[[6,8,5],[1,6,0],6,[10]]],[[[0],[6,8,7,0],[4,8,9,10,8]],[[],[10,6,1,0],3,[4,1],3]],[9,[[],[],3,1],7,[[8,1,10,10,9],[3,8],[2,4,8]],0]]
        [[]]
        
        [[[[2,0,1],6,[1],7]],[7,10,2],[],[[]],[2,1,[[],9],[[6,9,9,6,0],[],[10,2]]]]
        [[4,[],6,5],[[],[[],[5,2]],[1,4],0,[[5],[9,9,4,1,5]]],[[],10,10,[8],[1,[8],2,9,2]],[7,3,[[0,8,5,2],[4,2,10],0]],[1,[[1,9,5],3,10,[10,8]],9,[[]]]]
    """.trimIndent()

    @Test
    internal fun partOne() {
        assertEquals(13, Day13.partOne(testData))
        assertEquals(14, Day13.partOne(moreTestData))
    }

    @Test
    internal fun partTwo() {
        val (distress1, distress2) = "[[2]]" to "[[6]]"
        val allPackets = testData.lines().filter { it.isNotBlank() } + listOf(distress1, distress2)
        val sorted = Day13.sorted(allPackets)
        println(sorted.joinToString("\n"))
        assertEquals(10, sorted.indexOf(distress1) + 1)
        assertEquals(14, sorted.indexOf(distress2) + 1)
        assertEquals(140, Y2022.Day13.partTwo(testData))
    }
}